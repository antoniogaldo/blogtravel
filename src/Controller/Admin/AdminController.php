<?php

namespace App\Controller\Admin;

use Symfony\Component\Routing\Annotation\Route;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Security\Http\Authentication\AuthenticationUtils;
use App\Form\Admin\ArticolicategoriaType;
use App\Entity\Admin\Articolicategoria;
use App\Form\Admin\ArticoliType;
use App\Entity\Admin\Articoli;
use App\Form\Admin\PubblicitaType;
use App\Entity\Admin\Pubblicita;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Symfony\Component\HttpFoundation\File\File;
use App\Service\FileUploader;

class AdminController extends Controller
{

  /**
  * @Route("/dashboard", name="dashboard")
  */
  public function dashboardAction()
  {
    return $this->render('admin/dashboard.html.twig');
  }

  /**
   * @Route("/addcategoria", name="addcategoria")
   */
  public function addcategoriaAction(Request $request, FileUploader $fileUploader)
  {
      $em= $this->getDoctrine()->getManager();
      $categoria= $em->getRepository(Articolicategoria::class)->findAll();
      // 1) build the form
      $articolicategoria = new Articolicategoria();
      $form = $this->createForm(ArticolicategoriaType::class, $articolicategoria);

      // 2) handle the submit (will only happen on POST)
      $form->handleRequest($request);
      if ($form->isSubmitted() && $form->isValid()) {
        $image = $articolicategoria->getImage();
        $imagename = $fileUploader->upload($image);
        $articolicategoria->setImage($imagename);
          // 4) save the User!
          $entityManager = $this->getDoctrine()->getManager();
          $entityManager->persist($articolicategoria);
          $entityManager->flush();
          // ... do any other work - like sending them an email, etc
          // maybe set a "flash" success message for the user
          return $this->redirectToRoute('addcategoria');
      }

      return $this->render(
          'admin/addcategoria.html.twig',array(
            'form' => $form->createView(),
            'categoria' => $categoria,
            'articolicategoria' => $articolicategoria,
          ));
  }

  /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }

  /**
  * @Route("/categoria/delete/{id}", name="deletecategoria")
  */
  public function deletecategoriaAction($id)
  {
    $entityManager = $this->getDoctrine()->getManager();
    $categoria = $entityManager->getRepository(Articolicategoria::class)->find($id);

    if (!$categoria) {
      throw $this->createNotFoundException(
        'Categoria non trovato '.$id
      );
    }
    if(file_exists ($image=($this->getParameter('image_directory').'/'.$categoria->getImage()))){
      unlink($image);
    }
    $entityManager->remove($categoria);
    $entityManager->flush();
    return $this->redirectToRoute('addcategoria');
  }

  /**
  * @Route("/categoria/edit/{id}", name="editcategoria")
  */
  public function editcategoriaAction(Request $request,$id)
  {
    $entityManager = $this->getDoctrine()->getManager();
    $categoria = $entityManager->getRepository(Articolicategoria::class)->find($id);
    $categoria->setNome($categoria->getNome());
    $categoria->setData($categoria->getData());
    $categoria->setActive($categoria->getActive());
    $image = new File($this->getParameter('image_directory').'/'.$categoria->getImage());
    $categoria->setImage($image);
    if (!$categoria) {
      throw $this->createNotFoundException(
        'User non trovato'.$id
      );
    }
    $form = $this->createForm(ArticolicategoriaType::class, $categoria);
    if ($request->isMethod('POST')) {
      // handle the first form
      $form->handleRequest($request);
      // control form //
      if($form->isSubmitted() &&  $form->isValid()){
        $nome = $form['nome']->getData();
        $data= $form['data']->getData();
        $active = $form['active']->getData();
        if(!empty($image)) {
          $imagename = $this->generateUniqueFileName().'.'.$image->guessExtension();
          $image->move($this->getParameter('image_directory'),$imagename);
       }
        $sn = $this->getDoctrine()->getManager();
        $categoria = $sn->getRepository(Articolicategoria::class)->find($id);
        $categoria->setNome($nome);
        $categoria->setData($data);
        $categoria->setActive($active);
        $categoria->setImage($imagename);
        $sn -> persist($categoria);
        $sn -> flush();
        $request->getSession()
        ->getFlashBag()
        ->add('success', 'Hai modificato una categoria');
      }
      else {
        // alert insucces //
        $request->getSession()
        ->getFlashBag()
        ->add('notsuccess', 'Categoria gia presente');
      }
      return $this->redirectToRoute('addcategoria');
    }
    return $this->render('admin/editcategoria.html.twig', [
      'form' => $form->createView(),
      'categoria' => $categoria

    ]);
  }

  /**
  * @Route("/categoria/view/{id}", name="viewcategoria")
  */
  public function categoriaviewAction(Request $request,$id)
  {
    $entityManager = $this->getDoctrine()->getManager();
    $categoria = $entityManager->getRepository(Articolicategoria::class)->find($id);
    return $this->render(
      'admin/viewcategoria.html.twig',array(
        'categoria' => $categoria
      ));
  }

  /**
   * @Route("/addarticoli", name="addarticoli")
   */
  public function addarticoliAction(Request $request)
  {
      $em= $this->getDoctrine()->getManager();
      $articoliwrite= $em->getRepository(Articoli::class)->findAll();
      // 1) build the form
      $articoli = new Articoli();
      $form = $this->createForm(ArticoliType::class, $articoli);

      // 2) handle the submit (will only happen on POST)
      $form->handleRequest($request);
      if ($form->isSubmitted() && $form->isValid()) {
          $image = $articoli->getImage();
          $imagename = $this->generateUniqueFileName().'.'.$image->guessExtension();
          // moves the file to the directory where brochures are stored
          $image->move($this->getParameter('image_directory'),$imagename);
          // updates the 'brochure' property to store the PDF file name
          // instead of its contents
          $articoli->setImage($imagename);
          // 4) save the User!
          $entityManager = $this->getDoctrine()->getManager();
          $entityManager->persist($articoli);
          $entityManager->flush();
          // ... do any other work - like sending them an email, etc
          // maybe set a "flash" success message for the user
          return $this->redirectToRoute('addarticoli');
      }

      return $this->render(
          'admin/addarticoli.html.twig',array(
            'form' => $form->createView(),
            'articoliwrite' => $articoliwrite
          ));
  }

  /**
  * @Route("/articoli/delete/{id}", name="deletearticoli")
  */
  public function deletearticoliAction($id)
  {
    $entityManager = $this->getDoctrine()->getManager();
    $articoli = $entityManager->getRepository(Articoli::class)->find($id);
    if (!$articoli) {
      throw $this->createNotFoundException(
        'Articoli non trovato '.$id
      );
    }
    if(file_exists ($image=($this->getParameter('image_directory').'/'.$articoli->getImage()))){
      unlink($image);
    }
    $entityManager->remove($articoli);
    $entityManager->flush();
    return $this->redirectToRoute('addarticoli');
  }

  /**
  * @Route("/articoli/edit/{id}", name="editarticoli")
  */
  public function editarticoliAction(Request $request,$id)
  {
    $entityManager = $this->getDoctrine()->getManager();
    $articoli = $entityManager->getRepository(Articoli::class)->find($id);
    $articoli->setActive($articoli->getActive());
    $articoli->setTitolo($articoli->getTitolo());
    $articoli->setData($articoli->getData());
    $image = new File($this->getParameter('image_directory').'/'.$articoli->getImage());
    $articoli->setImage($image);
    $articoli->setTags($articoli->getTags());
    $articoli->setArticolo($articoli->getArticolo());
    $articoli->setAutore($articoli->getAutore());
    $articoli->setCategoria($articoli->getCategoria());
    if (!$articoli) {
      throw $this->createNotFoundException(
        'Articoli non trovato'.$id
      );
    }
    $form = $this->createForm(ArticoliType::class, $articoli);
    if ($request->isMethod('POST')) {
      // handle the first form
      $form->handleRequest($request);
      // control form //
      if($form->isSubmitted() &&  $form->isValid()){
        // updates the 'brochure' property to store the PDF file name
        // instead of its contents
        $active = $form['active']->getData();
        $titolo = $form['titolo']->getData();
        if(!empty($image)) {
          $imagename = $this->generateUniqueFileName().'.'.$image->guessExtension();
          $image->move($this->getParameter('image_directory'),$imagename);
       }
        $data= $form['data']->getData();
        $articolo= $form['articolo']->getData();
        $tags= $form['tags']->getData();
        $autore = $form['autore']->getData();
        $categoria= $form['categoria']->getData();
        $sn = $this->getDoctrine()->getManager();
        $articoli = $sn->getRepository(Articoli::class)->find($id);
        $articoli->setActive($active);
        $articoli->setTitolo($titolo);
        $articoli->setImage($imagename);
        $articoli->setData($data);
        $articoli->setTags($tags);
        $articoli->setArticolo($articolo);
        $articoli->setAutore($autore);
        $articoli->setCategoria($categoria);
        $sn -> persist($articoli);
        $sn -> flush();
        $request->getSession()
        ->getFlashBag()
        ->add('success', 'Hai modificato un articolo');
      }
      else {
        // alert insucces //
        $request->getSession()
        ->getFlashBag()
        ->add('notsuccess', 'Articolo gia presente');
      }
      return $this->redirectToRoute('addarticoli');
    }
    return $this->render('admin/editarticoli.html.twig', [
      'form' => $form->createView(),
      'articoli' => $articoli

    ]);
  }

  /**
  * @Route("/articoli/view/{id}", name="viewarticoli")
  */
  public function articoliviewAction(Request $request,$id)
  {
    $entityManager = $this->getDoctrine()->getManager();
    $articoli = $entityManager->getRepository(Articoli::class)->find($id);
    return $this->render(
      'admin/viewarticoli.html.twig',array(
        'articoli' => $articoli
      ));
  }

  /**
   * @Route("/addpubblicita", name="addpubblicita")
   */
  public function addpubblicitaAction(Request $request)
  {
      $em= $this->getDoctrine()->getManager();
      $pubblicita= $em->getRepository(Pubblicita::class)->findAll();
      // 1) build the form
      $nuovapubblicita = new Pubblicita();
      $form = $this->createForm(PubblicitaType::class, $nuovapubblicita);

      // 2) handle the submit (will only happen on POST)
      $form->handleRequest($request);
      if ($form->isSubmitted() && $form->isValid()) {
          // 4) save the User!
          $entityManager = $this->getDoctrine()->getManager();
          $entityManager->persist($nuovapubblicita);
          $entityManager->flush();
          // ... do any other work - like sending them an email, etc
          // maybe set a "flash" success message for the user
          return $this->redirectToRoute('addpubblicita');
      }

      return $this->render(
          'admin/addpubblicita.html.twig',array(
            'form' => $form->createView(),
            'pubblicita' => $pubblicita,
            'nuovapubblicita' => $nuovapubblicita,
          ));
  }

  /**
  * @Route("/pubblicita/view/{id}", name="viewpubblicita")
  */
  public function pubblicitaviewAction(Request $request,$id)
  {
    $entityManager = $this->getDoctrine()->getManager();
    $pubblicita= $entityManager->getRepository(Pubblicita::class)->find($id);
    return $this->render(
      'admin/viewpubblicita.html.twig',array(
        'pubblicita' => $pubblicita
      ));
  }

  /**
  * @Route("/pubblicita/delete/{id}", name="deletepubblicita")
  */
  public function deletepubblicitaAction($id)
  {
    $entityManager = $this->getDoctrine()->getManager();
    $pubblicita = $entityManager->getRepository(Pubblicita::class)->find($id);
    if (!$pubblicita) {
      throw $this->createNotFoundException(
        'Articoli non trovato '.$id
      );
    }
    $entityManager->remove($pubblicita);
    $entityManager->flush();
    return $this->redirectToRoute('addpubblicita');
  }

  /**
  * @Route("/pubblicita/edit/{id}", name="editpubblicita")
  */
  public function editpubblicitaAction(Request $request,$id)
  {
    $entityManager = $this->getDoctrine()->getManager();
    $pubblicita = $entityManager->getRepository(Pubblicita::class)->find($id);
    $pubblicita->setActive($pubblicita->getActive());
    $pubblicita->setCompagnia($pubblicita->getCompagnia());
    $pubblicita->setPosizione($pubblicita->getPosizione());
    $pubblicita->setScript($pubblicita->getScript());
    if (!$pubblicita) {
      throw $this->createNotFoundException(
        'Pubblicita non trovato'.$id
      );
    }
    $form = $this->createForm(PubblicitaType::class, $pubblicita);
    if ($request->isMethod('POST')) {
      // handle the first form
      $form->handleRequest($request);
      // control form //
      if($form->isSubmitted() &&  $form->isValid()){
        // updates the 'brochure' property to store the PDF file name
        // instead of its contents
        $active = $form['active']->getData();
        $compagnia = $form['compagnia']->getData();
        $script= $form['script']->getData();
        $posizione= $form['posizione']->getData();
        $sn = $this->getDoctrine()->getManager();
        $pubblicita = $sn->getRepository(Pubblicita::class)->find($id);
        $pubblicita->setActive($active);
        $pubblicita->setCompagnia($compagnia);
        $pubblicita->setPosizione($posizione);
        $pubblicita->setScript($script);
        $sn -> persist($pubblicita);
        $sn -> flush();
        $request->getSession()
        ->getFlashBag()
        ->add('success', 'Hai modificato una pubblicita');
      }
      else {
        // alert insucces //
        $request->getSession()
        ->getFlashBag()
        ->add('notsuccess', 'Pubblicita gia presente');
      }
      return $this->redirectToRoute('addpubblicita');
    }
    return $this->render('admin/editpubblicita.html.twig', [
      'form' => $form->createView(),
      'pubblicita' => $pubblicita

    ]);
  }

}
